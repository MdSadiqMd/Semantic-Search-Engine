services:
  postgres:
    image: pgvector/pgvector:pg17
    container_name: semantic-search-engine-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: vectordb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-postgres.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  neo4j:
    image: neo4j:5.15-community
    container_name: semantic-search-engine-neo4j
    environment:
      NEO4J_AUTH: neo4j/password
      NEO4J_PLUGINS: '["apoc"]'
      NEO4J_apoc_export_file_enabled: 'true'
      NEO4J_apoc_import_file_enabled: 'true'
      NEO4J_apoc_import_file_use__neo4j__config: 'true'
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "password", "RETURN 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: semantic-search-engine-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  embedding-service:
    build:
      context: .
      target: embedding-service
    container_name: semantic-search-embedding
    environment:
      - MODEL_NAME=google/embeddinggemma-300m
      - MODEL_CACHE_DIR=/app/models
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8080
    ports:
      - "8080:8080"
    volumes:
      - embedding_models:/app/models
      - ./scripts/embedding-server.py:/app/server.py
    restart: unless-stopped

  server:
    build:
      context: .
      dockerfile: Dockerfile
      target: server
    container_name: semantic-search-engine-api
    environment:
      - DATABASE_URL=postgres://postgres:password@postgres:5432/vectordb?sslmode=disable
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=password
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=
      - REDIS_DB=0
      - EMBEDDING_PROVIDER=local
      - EMBEDDING_MODEL=embeddinggemma-300m
      - EMBEDDING_ENDPOINT=http://embedding-service:8080
      - EMBEDDING_API_KEY=
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy  
      redis:
        condition: service_healthy
    volumes:
      - ./config:/app/config
    restart: unless-stopped

  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: worker
    container_name: semantic-search-engine-worker
    environment:
      - DATABASE_URL=postgres://postgres:password@postgres:5432/vectordb?sslmode=disable
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=password
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=
      - REDIS_DB=0
      - EMBEDDING_PROVIDER=local
      - EMBEDDING_MODEL=embeddinggemma-300m
      - EMBEDDING_ENDPOINT=http://embedding-service:8080
      - EMBEDDING_API_KEY=
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./config:/app/config
    restart: unless-stopped

  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: frontend
    container_name: semantic-search-engine-frontend
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_WS_URL=ws://localhost:8000
    ports:
      - "5000:5000"
    volumes:
      - .:/app
      - /app/node_modules
    profiles:
      - development

volumes:
  postgres_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  redis_data:
    driver: local
  embedding_models:
    driver: local

networks:
  default:
    name: semantic-search-engine-network
